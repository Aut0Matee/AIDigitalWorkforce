version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ai_workforce_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-ai_workforce}
      MYSQL_USER: ${MYSQL_USER:-ai_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-aipassword123}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/init_mysql.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-rootpassword123}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_workforce_backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_TYPE: mysql
      DATABASE_URL: mysql+pymysql://${MYSQL_USER:-ai_user}:${MYSQL_PASSWORD:-aipassword123}@mysql:3306/${MYSQL_DATABASE:-ai_workforce}
      
      # API Keys (REQUIRED - set in .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      
      # Application Settings
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      API_HOST: 0.0.0.0
      API_PORT: 8000
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # CORS Settings
      ALLOWED_ORIGINS: '["http://localhost", "http://localhost:80", "http://localhost:3000", "http://frontend", "http://frontend:80"]'
      
      # WebSocket Settings
      WS_PING_INTERVAL: ${WS_PING_INTERVAL:-25}
      WS_PING_TIMEOUT: ${WS_PING_TIMEOUT:-60}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend/app:/app/app:ro
      - ./backend/data:/app/data
    networks:
      - ai_network
    command: >
      sh -c "
        echo 'Waiting for MySQL to be ready...' &&
        while ! nc -z mysql 3306; do 
          echo 'MySQL not ready, waiting...';
          sleep 2; 
        done &&
        echo 'MySQL is ready!' &&
        echo 'Initializing database tables...' &&
        python -c '
        import asyncio
        from app.database import create_tables
        asyncio.run(create_tables())
        print(\"Database initialization complete!\")
        ' &&
        echo 'Starting application...' &&
        uvicorn main:socket_app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_workforce_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - ai_network
    environment:
      - BACKEND_URL=http://backend:8000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: ai_workforce_adminer
    restart: unless-stopped
    depends_on:
      - mysql
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - ai_network
    environment:
      ADMINER_DEFAULT_SERVER: mysql
      ADMINER_DESIGN: pepa-linha

networks:
  ai_network:
    driver: bridge
    name: ai_workforce_network

volumes:
  mysql_data:
    name: ai_workforce_mysql_data
    driver: local